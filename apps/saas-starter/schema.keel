model User {
    fields {
        identity Identity @unique
        name Text
        email Text
        documents Document[]
    }

    actions {
        get me() {
            @where(user.identity == ctx.identity)
        }
        list listUsers()
        delete deleteUser(id)
        create createUser() with (name, email) {
            @set(user.identity = ctx.identity)
            @permission(expression: ctx.isAuthenticated)
        }
        update updateUser(id) with (name?, email?)
    }

    @permission(
        actions: [get, update, list, delete],
        expression: user.identity == ctx.identity
    )
}

model Team {
    fields {
        name Text
        description Text?
        documents Document[]
        owner Identity
        logoUrl Text?
    }

    actions {
        get getTeam(id)
        list listTeams()
        delete deleteTeam(id)
        update updateTeam(id) with (name?, description?, logoUrl?)
        write uploadTeamLogo(UploadImageInput) returns (UploadImageResponse) {
            @permission(expression: true)
        }
    }

    @unique([owner, name])

    @permission(
        actions: [get, list, update, delete],
        expression: ctx.isAuthenticated
    )
}

model TeamMembership {
    fields {
        user User
        team Team
    }

    actions {
        create createTeamMembership() with (team.name, team.description, user.id) {
            @permission(expression: ctx.isAuthenticated)
            @set(teamMembership.team.owner = ctx.identity)
        }
    }
}

model Document {
    fields {
        title Text
        content Text
        user User
        team Team?
    }

    actions {
        get getDocument(id) {
            @permission(expression: document.user.identity == ctx.identity)
        }
        list listDocuments(team.id) {
            @permission(expression: document.user.identity == ctx.identity)
        }
        delete deleteDocument(id, user.id?, team.id?) {
            @permission(expression: document.user.identity == ctx.identity)
        }
        create createDocument() with (title, content, team.id?, user.id) {
            @permission(expression: ctx.isAuthenticated)
        }
        update updateDocument(id) with (title?, content?, team.id?, user.id?)
    }

    @permission(
        actions: [get, list, update, delete],
        expression: document.user.identity == ctx.identity
    )
}

message UploadImageInput {
    base64Image Text
    teamId ID
}

message UploadImageResponse {
    path Text
}

model Invitation {
    fields {
        team Team
        email Text
        expiry Timestamp
    }

    actions {
        list activeInvites() {
            @where(invitation.expiry > ctx.now)
            @permission(expression: ctx.isAuthenticated)
        }
        create createInvite() with (email, team.id, expiry) @function
    }

    @permission(
        actions: [create, get, update],
        expression: ctx.isAuthenticated
    )
}

job PruneDatabase {
    @schedule("0 0 * * *")
    @permission(expression: true)
}
